!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=3)}([function(e,n,t){var r,o,i=t(1),u=t(2),c=0,a=0;e.exports=function(e,n,t){var l=n&&t||0,f=n||[],s=(e=e||{}).node||r,d=void 0!==e.clockseq?e.clockseq:o;if(null==s||null==d){var p=i();null==s&&(s=r=[1|p[0],p[1],p[2],p[3],p[4],p[5]]),null==d&&(d=o=16383&(p[6]<<8|p[7]))}var y=void 0!==e.msecs?e.msecs:(new Date).getTime(),v=void 0!==e.nsecs?e.nsecs:a+1,h=y-c+(v-a)/1e4;if(h<0&&void 0===e.clockseq&&(d=d+1&16383),(h<0||y>c)&&void 0===e.nsecs&&(v=0),v>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");c=y,a=v,o=d;var w=(1e4*(268435455&(y+=122192928e5))+v)%4294967296;f[l++]=w>>>24&255,f[l++]=w>>>16&255,f[l++]=w>>>8&255,f[l++]=255&w;var b=y/4294967296*1e4&268435455;f[l++]=b>>>8&255,f[l++]=255&b,f[l++]=b>>>24&15|16,f[l++]=b>>>16&255,f[l++]=d>>>8|128,f[l++]=255&d;for(var m=0;m<6;++m)f[l+m]=s[m];return n||u(f)}},function(e,n){var t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(t){var r=new Uint8Array(16);e.exports=function(){return t(r),r}}else{var o=new Array(16);e.exports=function(){for(var e,n=0;n<16;n++)0==(3&n)&&(e=4294967296*Math.random()),o[n]=e>>>((3&n)<<3)&255;return o}}},function(e,n){for(var t=[],r=0;r<256;++r)t[r]=(r+256).toString(16).substr(1);e.exports=function(e,n){var r=n||0,o=t;return[o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]]].join("")}},function(e,n,t){"use strict";t.r(n);var r=function(){function e(){}return e.prototype.download=function(e){return new Promise(function(n){fetch(e).then(function(e){var t=e.body.getReader(),r=0,o=[];return t.read().then(function e(i){if(!i.done)return o.push(i.value),r+=i.value.length,console.log("Received",r,"bytes of data so far"),t.read().then(e);console.log("Fetch complete");var u=function(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];for(var r=0,o=0,i=n;o<i.length;o++)r+=(f=i[o]).length;for(var u=new e(r),c=0,a=0,l=n;a<l.length;a++){var f=l[a];u.set(f,c),c+=f.length}return u}.apply(void 0,[Uint8Array].concat(o)),c=URL.createObjectURL(new Blob([u.buffer],{type:"application/octet-stream"}));n(c)})})})},e}(),o=t(0),i=t.n(o),u=function(e,n,t,r){return new(t||(t=Promise))(function(o,i){function u(e){try{a(r.next(e))}catch(e){i(e)}}function c(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){e.done?o(e.value):new t(function(n){n(e.value)}).then(u,c)}a((r=r.apply(e,n||[])).next())})},c=function(e,n){var t,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;u;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=(o=u.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(e,u)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},a=function(){function e(){}return e.prototype.download=function(e){var n=this;return new Promise(function(t,r){var o=function(e){console.error(e),r(e)};(window.requestFileSystem||window.webkitRequestFileSystem)(window.TEMPORARY,1572864e3,function(r){console.log("Opened file system: "+r.name),r.root.getFile(i()()+".pdf",{create:!0},function(r){fetch(e).then(function(e){var o=e.body.getReader(),i=0;return o.read().then(function e(a){return u(this,void 0,void 0,function(){return c(this,function(u){switch(u.label){case 0:return a.done?(console.log("Fetch complete"),t(r.toURL()),[2]):[4,n.writeOnFileEntry(r,a.value)];case 1:return u.sent(),i+=a.value.length,console.log("Just received "+a.value.length+" bytes"),console.log("Received",i,"bytes of data so far"),[2,o.read().then(e)]}})})})})},o)},o)})},e.prototype.writeOnFileEntry=function(e,n){return u(this,void 0,void 0,function(){return c(this,function(t){return[2,new Promise(function(t,r){e.createWriter(function(e){e.onwriteend=function(e){t(),console.log("Write completed.")},e.onerror=function(e){r(),console.log("Write failed: "+e.toString())},console.log("written so far = "+e.length),e.seek(e.length);var o=new Blob([n],{type:"application/octet-stream"});e.write(o)},function(e){throw console.error(e),new Error(e)})})]})})},e}();var l=function(e,n,t,r){return new(t||(t=Promise))(function(o,i){function u(e){try{a(r.next(e))}catch(e){i(e)}}function c(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){e.done?o(e.value):new t(function(n){n(e.value)}).then(u,c)}a((r=r.apply(e,n||[])).next())})},f=function(e,n){var t,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;u;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=(o=u.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(e,u)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},s=document.getElementById("root");l(void 0,void 0,void 0,function(){var e,n,t,o,i;return f(this,function(u){switch(u.label){case 0:return u.trys.push([0,2,,3]),e=document.querySelector("#root a"),(n=document.createElement("div")).className="loading",n.innerHTML="Loading...",s.replaceChild(n,e),[4,(window.requestFileSystem||window.webkitRequestFileSystem?new a:new r).download("files/book.pdf")];case 1:return t=u.sent(),(o=document.createElement("a")).href=t,o.download="book.pdf",o.innerHTML="Download",s.replaceChild(o,n),[3,3];case 2:return i=u.sent(),console.error(i),[3,3];case 3:return[2]}})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,