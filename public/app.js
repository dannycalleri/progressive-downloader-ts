!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r,o=function(){function e(){this.delegate=document.createDocumentFragment()}return e.prototype.addEventListener=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this.delegate.addEventListener.apply(this.delegate,e)},e.prototype.dispatchEvent=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.delegate.dispatchEvent.apply(this.delegate,e)},e.prototype.removeEventListener=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.delegate.removeEventListener.apply(this.delegate,e)},e}(),i=(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});var a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.download=function(e){var t=this;return new Promise(function(n){fetch(e).then(function(e){var r=e.body.getReader(),o=0,i=[],a=function(e){if(!e.done){i.push(e.value),o+=e.value.length;var u=new CustomEvent("progress",{detail:{bytesReceived:o}});return t.dispatchEvent(u),console.log("Received",o,"bytes of data so far"),r.read().then(a)}console.log("Fetch complete");var c=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=0,o=0,i=t;o<i.length;o++)r+=(f=i[o]).length;for(var a=new e(r),u=0,c=0,l=t;c<l.length;c++){var f=l[c];a.set(f,u),u+=f.length}return a}.apply(void 0,[Uint8Array].concat(i)),l=URL.createObjectURL(new Blob([c.buffer],{type:"application/octet-stream"}));n(l)};return r.read().then(a)})})},t}(o),u=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.download=function(e){return Promise.resolve(e)},t}(o);var l=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function u(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,u)}c((r=r.apply(e,t||[])).next())})},f=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},s=document.getElementById("root");l(void 0,void 0,void 0,function(){var e,t,n,r,o,i;return f(this,function(u){switch(u.label){case 0:return u.trys.push([0,2,,3]),e=document.querySelector("#root a"),(t=document.createElement("div")).className="loading",t.innerHTML="Downloading:",s.replaceChild(t,e),window.requestFileSystem||window.webkitRequestFileSystem,(n=window.fetch&&window.ReadableStream?new a:new c).addEventListener("progress",function(e){var n=Math.floor(e.detail.bytesReceived/2074956491*100);t.innerHTML="Downloading: "+n+"%"}),[4,n.download("files/package.zip")];case 1:return r=u.sent(),(o=document.createElement("a")).href=r,o.download="package.zip",o.innerHTML="Save",s.replaceChild(o,t),[3,3];case 2:return i=u.sent(),console.error(i),[3,3];case 3:return[2]}})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,