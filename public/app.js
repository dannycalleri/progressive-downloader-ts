!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){var r,o,i=n(1),u=n(2),c=0,a=0;e.exports=function(e,t,n){var l=t&&n||0,s=t||[],f=(e=e||{}).node||r,p=void 0!==e.clockseq?e.clockseq:o;if(null==f||null==p){var d=i();null==f&&(f=r=[1|d[0],d[1],d[2],d[3],d[4],d[5]]),null==p&&(p=o=16383&(d[6]<<8|d[7]))}var y=void 0!==e.msecs?e.msecs:(new Date).getTime(),v=void 0!==e.nsecs?e.nsecs:a+1,h=y-c+(v-a)/1e4;if(h<0&&void 0===e.clockseq&&(p=p+1&16383),(h<0||y>c)&&void 0===e.nsecs&&(v=0),v>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");c=y,a=v,o=p;var w=(1e4*(268435455&(y+=122192928e5))+v)%4294967296;s[l++]=w>>>24&255,s[l++]=w>>>16&255,s[l++]=w>>>8&255,s[l++]=255&w;var b=y/4294967296*1e4&268435455;s[l++]=b>>>8&255,s[l++]=255&b,s[l++]=b>>>24&15|16,s[l++]=b>>>16&255,s[l++]=p>>>8|128,s[l++]=255&p;for(var g=0;g<6;++g)s[l+g]=f[g];return t||u(s)}},function(e,t){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var r=new Uint8Array(16);e.exports=function(){return n(r),r}}else{var o=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),o[t]=e>>>((3&t)<<3)&255;return o}}},function(e,t){for(var n=[],r=0;r<256;++r)n[r]=(r+256).toString(16).substr(1);e.exports=function(e,t){var r=t||0,o=n;return[o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]]].join("")}},function(e,t,n){"use strict";n.r(t);var r,o=function(){function e(){this.delegate=document.createDocumentFragment()}return e.prototype.addEventListener=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this.delegate.addEventListener.apply(this.delegate,e)},e.prototype.dispatchEvent=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.delegate.dispatchEvent.apply(this.delegate,e)},e.prototype.removeEventListener=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.delegate.removeEventListener.apply(this.delegate,e)},e}(),i=(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});var u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.download=function(e){var t=this;return new Promise(function(n){fetch(e).then(function(e){var r=e.body.getReader(),o=0,i=[],u=function(e){if(!e.done){i.push(e.value),o+=e.value.length;var c=new CustomEvent("progress",{detail:{bytesReceived:o}});return t.dispatchEvent(c),console.log("Received",o,"bytes of data so far"),r.read().then(u)}console.log("Fetch complete");var a=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=0,o=0,i=t;o<i.length;o++)r+=(s=i[o]).length;for(var u=new e(r),c=0,a=0,l=t;a<l.length;a++){var s=l[a];u.set(s,c),c+=s.length}return u}.apply(void 0,[Uint8Array].concat(i)),l=URL.createObjectURL(new Blob([a.buffer],{type:"application/octet-stream"}));n(l)};return r.read().then(u)})})},t}(o),c=n(0),a=n.n(c),l=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),s=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function u(e){try{a(r.next(e))}catch(e){i(e)}}function c(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(u,c)}a((r=r.apply(e,t||[])).next())})},f=function(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=(o=u.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},p=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return l(t,e),t.prototype.download=function(e){var t=this;return new Promise(function(n,r){var o=function(e){console.error(e),r(e)};(window.requestFileSystem||window.webkitRequestFileSystem)(window.TEMPORARY,1572864e3,function(r){console.log("Opened file system: "+r.name),r.root.getFile(a()()+".pdf",{create:!0},function(r){fetch(e).then(function(e){var o=e.body.getReader(),i=0,u=function(e){return s(t,void 0,void 0,function(){var t;return f(this,function(c){switch(c.label){case 0:return e.done?(console.log("Fetch complete"),n(r.toURL()),[2]):[4,this.writeChunkOnFile(r,e.value)];case 1:return c.sent(),i+=e.value.length,t=new CustomEvent("progress",{detail:{bytesReceived:i}}),this.dispatchEvent(t),console.log("Just received "+e.value.length+" bytes"),console.log("Received",i,"bytes of data so far"),[2,o.read().then(u)]}})})};return o.read().then(u)})},o)},o)})},t.prototype.writeChunkOnFile=function(e,t){return s(this,void 0,void 0,function(){return f(this,function(n){return[2,new Promise(function(n,r){e.createWriter(function(e){e.onwriteend=function(e){n(),console.log("Write completed.")},e.onerror=function(e){r(),console.log("Write failed: "+e.toString())},console.log("written so far = "+e.length),e.seek(e.length);var o=new Blob([t],{type:"application/octet-stream"});e.write(o)},function(e){throw console.error(e),new Error(e)})})]})})},t}(o),d=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),y=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return d(t,e),t.prototype.download=function(e){return Promise.resolve(e)},t}(o);var v=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function u(e){try{a(r.next(e))}catch(e){i(e)}}function c(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(u,c)}a((r=r.apply(e,t||[])).next())})},h=function(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=(o=u.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},w=document.getElementById("root");v(void 0,void 0,void 0,function(){var e,t,n,r,o,i;return h(this,function(c){switch(c.label){case 0:return c.trys.push([0,2,,3]),e=document.querySelector("#root a"),(t=document.createElement("div")).className="loading",t.innerHTML="Loading:",w.replaceChild(t,e),a=window.requestFileSystem||window.webkitRequestFileSystem,(n=window.fetch&&window.ReadableStream?a?new p:new u:new y).addEventListener("progress",function(e){var n=Math.floor(e.detail.bytesReceived/174156788*100);t.innerHTML="Loading: "+n+"%"}),[4,n.download("files/book.pdf")];case 1:return r=c.sent(),(o=document.createElement("a")).href=r,o.download="book.pdf",o.innerHTML="Download",w.replaceChild(o,t),[3,3];case 2:return i=c.sent(),console.error(i),[3,3];case 3:return[2]}var a})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,